unit cBanco;

interface

uses  System.Classes,
      Vcl.Controls,
      Vcl.ExtCtrls,
      Vcl.Dialogs,
      ZAbstractConnection,
      ZConnection,
      ZAbstractRODataset,
      ZAbstractDataset,
      ZDataset,
      System.SysUtils;

Type
  TBanco = class

  private
    ConexaoDB   : TZConnection;
    F_IdBanco   : Integer;
    F_Nome      : string;
    F_Situacao  : string;

    function getCodigo  : Integer;
    function getNome    : String;
    function getSituacao: String;

    procedure setCodigo(const Value : Integer);
    procedure setNome  (const Value : String);
    procedure setSituacao(const Value : String);

  public
    constructor Create(aConexao : TZConnection);
    destructor  Destroy; override;

    function InserirRegistro                  : Boolean;
    function ExcluiRegistro                   : Boolean;
    function AtualizarRegistro                : Boolean;
    function SelecionarRegistro(id : Integer) : Boolean;

  published
    property codigo   : Integer         read getCodigo          write setCodigo;
    property nome     : string          read getNome             write setNome;
    property situacao : string          read getSituacao         write setSituacao;

  end;

implementation

{ TBanco }

{$region 'Construtor e destrutor'}

constructor TBanco.Create(aConexao: TZConnection);
begin
  ConexaoDB   := aConexao;
end;



destructor TBanco.Destroy;
begin
  inherited;
end;

{$endregion}



{$region 'Inserir, Apagar, Atualizar e Selecinar'}


function TBanco.ExcluiRegistro: Boolean;
begin

end;



function TBanco.getCodigo: Integer;
begin
  Result  :=  Self.F_IdBanco;
end;

function TBanco.getNome: String;
begin
  Result  :=  Self.F_Nome;
end;

function TBanco.getSituacao: String;
begin
  Result  :=  Self.getSituacao;
end;

function TBanco.AtualizarRegistro: Boolean;
begin

end;



function TBanco.InserirRegistro: Boolean;
var Qry : TZQuery;
begin
  try
    Result                  := true;
    Qry                     := TZQuery.Create(nil);
    Qry.Connection          := ConexaoDB;
    Qry.sql.Clear;
    Qry.SQL.Add('INSERT INTO bancos (nome, situacao) VALUES (:nome, :situacao)');
    Qry.ParamByName('nome').AsString        := Self.F_nome;
    Qry.ParamByName('situacao').AsString  := Self.F_Situacao;

    try
      Qry.ExecSQL;
    Except
      Result  := false; // se der BO e não executar o SQL, vai cair aqui
    end;

  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;



function TBanco.SelecionarRegistro(id: Integer): Boolean;
begin

end;


procedure TBanco.setCodigo(const Value: Integer);
begin
  F_IdBanco := Value;
end;

procedure TBanco.setNome(const Value: String);
begin
  F_Nome := Value;
end;

procedure TBanco.setSituacao(const Value: String);
begin
  F_Situacao := Value;
end;

{$endregion}



end.
